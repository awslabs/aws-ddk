name: Documentation Version Release
on:
  push:
    tags:        
      - '*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version of documentation to generate and release, x.y.z'     
        required: true
jobs:
  docs-release:
    runs-on: ubuntu-latest
    steps:
      - name: Setup python
        uses: actions/setup-python@v2
      - name: Checkout 🛎️
        uses: actions/checkout@v2
      - name: Checkout gh pages 🛎️
        uses: actions/checkout@v2
        with:
          ref: gh-pages
          path: gh-pages
      - name: Set Version ➕
        run: |
          if [ -z ${{ github.event.inputs.version }} ]; then echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV; else echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV; fi
      - name: Release 🌱
        run: |
          cp gh-pages/_data/versions.yaml docs/_data/versions.yaml
          python -m pip install --upgrade pip
          python -m pip install poetry
          pushd core; poetry export -f requirements.txt --output ../docs/source/requirements_core.txt --without-hashes; popd
          pushd cli; poetry export -f requirements.txt --output ../docs/source/requirements_cli.txt --without-hashes; popd
          cd docs/source && pip install -r requirements_core.txt -r requirements_cli.txt -r requirements.txt
          cd ../
          ./bin/build_docs.sh $RELEASE_VERSION
      - name: Install Additional Requirements
        run: |
          pip install pyyaml
      - name: Set Stable Docs Version
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import os 

            from yaml import YAMLError, dump, safe_load

            file = "docs/_data/versions.yaml"
            version = os.environ.get("RELEASE_VERSION")
            with open(file, "r") as stream:
                try:
                    content = safe_load(stream)
                except YAMLError as exc:
                    print(exc)

            if "stable" in [entry["name"] for entry in content]:
                print(f"setting stable version to: '{version}'")
                for i in range(len(content)):
                    if content[i]["name"] == "stable":
                        content[i]["root"] = version
            else:
                print(f"no stable version present in configuration; adding {version} as stable")
                content.append({"name": "stable", "root": version})

            with open(file, "w") as output:
                dump(content, output)
      - name: Deploy 🚀
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs
          keep_files: true
          enable_jekyll: true
          exclude_assets: '.github,docs/_data/versions.yaml'
      
